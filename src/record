#!/usr/bin/python

import scribe
import signal
from optparse import OptionParser

# - Send a SIGUSR1 signal to stop the recording without aborting the recorded
#   program.
# - Send a SIGUSR2 signal to make a bookmark request.

def main():
    usage = 'usage: %prog [options] command [argument ...]'
    desc = 'Record a program execution and write it to a file. ' \
           'The default output file is command.log where command is the ' \
           'invoked process.'
    parser = OptionParser(usage=usage, description=desc)

    parser.add_option('-o', '--output', dest='logfile', metavar='FILE',
           help='Write the recorded execution to FILE.')
    parser.add_option('-l', '--log-verbosity', dest='log_verbosity',
            metavar='VERBOSITY', type='int', default=-1,
            help='Specify the verbosity of the recording in the log file. ' \
                 '0 results in a minimal log file, 15 is the opposite.')
    parser.add_option("-s", "--shell",
                      action="store_true", dest="shell", default=False,
                      help="Run the command through the shell")

    parser.disable_interspersed_args()
    (options, cmd) = parser.parse_args()
    if not cmd:
        parser.error('No command provided')

    if not options.logfile:
        if options.shell:
            options.logfile = 'sh.log'
        else:
            options.logfile = cmd[0] + '.log'
    logfile = open(options.logfile, 'w')

    if options.log_verbosity == -1:
        ps = scribe.Popen(logfile, cmd, record = True, shell = options.shell)
    else:
        flags = (1 << options.log_verbosity)-1
        ps = scribe.Popen(logfile, cmd, record = True, shell = options.shell,
                          flags = flags)

    def sigusr1(signum, stack):
        ps.stop()
    def sigusr2(signum, stack):
        ps.bookmark()
    signal.signal(signal.SIGUSR1, sigusr1)
    signal.signal(signal.SIGUSR2, sigusr2)

    ps.wait()

if __name__ == '__main__':
    main()
