#!/usr/bin/python

import scribe
import sys
import mmap
import signal
import logging
import errno
import datetime
from optparse import OptionParser

# Send a SIGUSR1 signal to go live when it can
# Send a SIGUSR2 signal to check for deadlocks

def configure_logging(level=logging.DEBUG):
    logger = logging.getLogger()
    logger.setLevel(level)
    ch = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter("%(message)s")
    ch.setFormatter(formatter)
    logger.addHandler(ch)

def main():
    usage = 'usage: %prog [options] log_file'
    desc = 'Replay a previously recorded execution.'
    parser = OptionParser(usage=usage, description=desc)

    parser.add_option('-b', '--backtrace', dest='backtrace_len',
            metavar='LEN', type='int', default=100,
            help='Specify the maximum number of entries in the backtrace. ' \
                 'The default is 100.')
    parser.add_option("-p", "--backtrace-all-pids",
            action="store_true", dest="backtrace_all_pids",
            default=False, help='Show the backtrace of all pids on error')
    parser.add_option("-l", "--last-events", dest="backtrace_num_last_events",
            metavar='N', type='int', default=0,
            help='Also show the last N events of each process')
    parser.add_option("-d", "--dmesg",
            action="store_true", dest="dmesg", default=False,
            help='Show a dmesg trace if the replay diverges')
    parser.add_option('-g', '--golive', dest='golive_bookmark_id',
            metavar='BOOKMARK_ID', type='int', default=None,
            help='Specify a specific bookmark to go live with')
    parser.add_option('-c', '--check-deadlock', dest='check_deadlock',
           metavar='INTERVAL', type='float', default=0,
           help='Check for deadlocks every INTERVAL seconds ' \
                '(floats are okey)')
    parser.add_option("-q", "--quiet",
            action="store_true", dest="quiet", default=False,
            help="Don't print the diverge error")

    (options, args) = parser.parse_args()
    if not args:
        parser.error('Give me a log file')
    if len(args) > 2:
        parser.error('You have extra arguments')

    configure_logging((logging.DEBUG, logging.INFO)[options.quiet])

    logfile = open(args[0], 'r+')

    stop_requested = [False]

    start = datetime.datetime.now()
    last = [datetime.datetime.now()]

    class ReplayContext(scribe.Context):
        def __init__(self, logfile, **kargs):
            scribe.Context.__init__(self, logfile, **kargs)
            self.logfile = logfile
            self.mutations = []

        def on_bookmark(self, id, npr):
            now = datetime.datetime.now()
            dstart = now - start
            dlast = now - last[0]
            last[0] = now
            print("Reached bmark %d at %d.%ds, +%d.%ds" %
                    (id, dstart.seconds, dstart.microseconds,
                        dlast.seconds, dlast.microseconds))

            if id == options.golive_bookmark_id or stop_requested[0]:
                self.stop()
            else:
                self.resume()

        def on_mutation(self, event, mutations):
            self.mutations.append(event)

        def has_mutations(self):
            return not not self.mutations

        def print_mutation_stats(self):
            print("")
            print("="*70)
            print("Syscalls mutation map:")

            syscalls = []
            logfile_map = mmap.mmap(self.logfile.fileno(), 0)
            offset = 0
            for event in scribe.EventsFromBuffer(logfile_map):
                if isinstance(event, scribe.EventSyscall) or \
                        isinstance(event, scribe.EventSyscallExtra):
                    syscalls.append((offset, False))
                offset += len(event)
            syscalls.extend((event.last_event_offset, True)
                            for event in self.mutations)
            syscalls.sort(key=lambda x: x[0])

            chars = min(len(syscalls), 100000)
            per_char = len(syscalls)/float(chars)
            str = ""
            for i in range(chars):
                start = int(i*per_char)
                end = int((i+1)*per_char)
                got_mutation = False
                for (_, mutation) in syscalls[start:end]:
                    if mutation:
                        got_mutation = True
                        break

                str += (".","+")[got_mutation]

            print(str)
            print("Mutations (+%d) interleaved in %d syscalls:" %
                    (len(self.mutations), len(syscalls)))

            mutation_count = dict()
            for event in self.mutations:
                t = event.__class__
                if t == scribe.EventDivergeSyscall:
                    t = event.nr
                if t in mutation_count:
                    mutation_count[t][1] += 1
                else:
                    mutation_count[t] = [event, 1]
            for _, (event, count) in mutation_count.items():
                print("  %s:\t%d" % (event, count))

    context = ReplayContext(logfile, show_dmesg = options.dmesg,
                            backtrace_len = options.backtrace_len,
                            backtrace_all_pids = options.backtrace_all_pids,
                            backtrace_num_last_events = options.backtrace_num_last_events)
    ps = scribe.Popen(context, replay = True)

    def do_stop(signum, stack):
        stop_requested[0] = True
    def do_check_deadlock(signum, stack):
        try:
            context.check_deadlock()
        except OSError as e:
            if e.errno != errno.EPERM:
                logging.error("Cannot check for deadlock (%s)" % str(e))
    signal.signal(signal.SIGUSR1, do_stop)
    signal.signal(signal.SIGALRM, do_check_deadlock)
    signal.signal(signal.SIGUSR2, do_check_deadlock)

    if options.check_deadlock:
        signal.setitimer(signal.ITIMER_REAL,
                         options.check_deadlock, options.check_deadlock)

    try:
        context.wait()
    except scribe.DivergeError as derr:
        logging.debug(str(derr))
        if context.has_mutations():
            context.print_mutation_stats()
        exit(derr.err)

    if stop_requested[0] or options.golive_bookmark_id:
        logging.info("Replay stopped")
    ps.wait()

    if context.has_mutations():
        context.print_mutation_stats()

if __name__ == '__main__':
    main()
